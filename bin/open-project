#!/bin/bash
#
# Open an existing or new Sublime project for PWD or the specified directories

set -Eeuo pipefail

bold="\\e[1m"
red="\\e[38;5;196m"
reset="\\e[0m"

absolute_dir_path() {
  local relative_dir
  relative_dir="$1"
  if [ -d "$relative_dir" ]; then
    cd "$relative_dir" && echo "$PWD"
  else
    echo "Directory not found: '$relative_dir'" >&2
    exit 1
  fi
}

find_existing_project_file() {
  local dir_path absolute_dir_path
  dir_path="$1"
  absolute_dir_path=$(absolute_dir_path "$1") || exit 1
  if [[ -d "$PROJECTS"/000_Sublime ]]; then
    grep -Rl "\"$absolute_dir_path\"" "$PROJECTS"/000_Sublime/*.sublime-project | head -1 || :
  else
    echo "Sublime projects directory doesn't exist yet; creating directory: '$PROJECTS/000_Sublime'..." >&2
    mkdir -p "$PROJECTS"/000_Sublime
  fi
}

project_name_from_project_file() {
  echo "$1" | sed -E -e 's/\.sublime-project$//' -e 's=(.+/)*==g' #| tee >( (echo -n "Project name from project file: "; cat) >&2 )
}

derive_project_name_from_dir() {
  local dir_path dir_name_without_branch_suffix
  dir_path="$1"
  dir_name_without_branch_suffix="$(echo "$dir_path" | tr / '\n' | tail -1 | tr : '\n' | head -1)"
  if is_mable_project; then
    echo "Mable $dir_name_without_branch_suffix"
  elif is_greensync_project; then
    echo "GreenSync $dir_name_without_branch_suffix"
  else
    echo "$dir_name_without_branch_suffix"
  fi | tee >( (echo -n "Derived project name from PWD: "; cat) >&2 )
}

create_project_file() {
  local all_dirs all_dirs_absolute new_project_file_path dir_absolute
  all_dirs=("$@")
  all_dirs_absolute=()
  for dir in "${all_dirs[@]}"; do
    dir_absolute="$(absolute_dir_path "$dir")" || exit 1
    all_dirs_absolute+=("$dir_absolute")
  done
  new_project_file_path="$PROJECTS/000_Sublime/$(derive_project_name_from_dir "${all_dirs_absolute[0]}" 2>/dev/null).sublime-project"
  echo "Creating project file: '$new_project_file_path'..." >&2
  if [ -f "$new_project_file_path" ]; then
    printf '%b%s%b' "$bold$red" "Error: Conflicting project file exists:" "$reset\n" >&2
    jq < "$new_project_file_path" >&2
    echo "The requested paths that were not found in that file are: " >&2
    for dir in "${all_dirs_absolute[@]}"; do
      echo "- $dir" >&2
    done
    exit 1
  fi
  ruby -r json -e 'puts({ folders: ARGV.map { |path| { path: path } } }.to_json)' "${all_dirs_absolute[@]}" > "$new_project_file_path"
  echo "$new_project_file_path"
}

is_mable_project() {
  git remote get-url origin | grep bettercaring/ &> /dev/null
}

is_greensync_project() {
  git remote get-url origin | grep greensync/ &> /dev/null
}

focus_window_of_project_name() {
  local project_name window_title
  project_name="$1"
  window_title="($project_name) - Sublime Text"
  echo "Attempting to focus window: '$window_title'" >&2
  if [[ "$OSTYPE" == darwin* ]]; then
    focus_window_on_macos
  elif [[ "${XDG_SESSION_TYPE-}" == x11 ]]; then
    focus_window_on_x
  else
    focus_window_on_wayland
  fi
}

focus_window_of_project_file() {
  local project_file project_name
  project_file="$1"
  project_name="$(project_name_from_project_file "$project_file")"
  focus_window_of_project_name "$project_name"
}

open_project_file_and_focus_window() {
  local project_file
  project_file="$1"
  subl --project "$project_file"
  echo -n "Waiting for Sublime to open project" >&2
  # Sublime seems to auto-focus now, but if Sublime wasn't already open, it might not put the right window on top
  while :; do
    focus_window_of_project_file "$project_file" &> /dev/null && break
    printf .
    sleep 0.01
  done
  echo >&2
}

focus_window_on_macos() {
  echo "Focusing window on MacOS is not yet implemented" >&2
}

focus_window_on_x() {
  wmctrl -a "$window_title"
}

focus_window_on_wayland() {
  enable_gnome_unsafe_mode_if_necessary
  gdbus call -e -d org.gnome.Shell -o /org/gnome/Shell -m org.gnome.Shell.Eval "var mw = global.get_window_actors().map(w=>w.meta_window).find(mw=>mw.get_title().includes('$window_title')).activate(0)" | grep -E '^\(true,' > /dev/null
}

# Gnome JS eval is prevented by default in new Gnome =(
# Enable it ('unsafe mode') with a macro
enable_gnome_unsafe_mode_if_necessary() {
  if ! is_gnome_js_eval_working; then
    enable_gnome_unsafe_mode
  fi
}

# If the JavaScript expression '1' evaluates successfully, then unsafe mode is already enabled
is_gnome_js_eval_working() {
  gdbus call -e -d org.gnome.Shell -o /org/gnome/Shell -m org.gnome.Shell.Eval 1 | grep -E '^\(true,' > /dev/null
}

enable_gnome_unsafe_mode() {
  echo "Need to enable Gnome unsafe mode, with Looking Glass using macro..." >&2
  ydotool key 56:1 60:1 60:0 56:0 # Alt + F2
  ydotool type -d 0 lg
  ydotool key 28:1 28:0 # Enter
  ydotool key 29:1 30:1 30:0 29:0 14:1 14:0 # Ctrl + A, Backspace
  ydotool type -d 0 'global.context.unsafe_mode = true'
  ydotool key 28:1 28:0 1:1 1:0 # Enter, Escape
}

first_dir="${1-$PWD}"
all_dirs=("${@-$first_dir}")

existing_project_file="$(find_existing_project_file "$first_dir")"
if [ -n "$existing_project_file" ]; then
  echo "Project exists: $existing_project_file" >&2
  focus_window_of_project_file "$existing_project_file" || (
    echo "Project not already open" >&2
    open_project_file_and_focus_window "$existing_project_file"
  )
else
  echo "Project doesn't exist yet" >&2
  new_project_file="$(create_project_file "${all_dirs[@]}")"
  open_project_file_and_focus_window "$new_project_file"
fi
