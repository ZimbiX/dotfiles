#!/bin/bash
#
# Open an existing or new Sublime project for PWD or the specified directories

set -Eeuo pipefail

absolute_dir_path() {
  local relative_dir
  relative_dir="$1"
  if [ -d "$relative_dir" ]; then
    cd "$relative_dir" && echo "$PWD"
  else
    echo "Directory not found: '$relative_dir'" >&2
    exit 1
  fi
}

find_existing_project_file() {
  local dir_path absolute_dir_path
  dir_path="$1"
  absolute_dir_path=$(absolute_dir_path "$1") || exit 1
  grep -Rl "\"$absolute_dir_path\"" "$PROJECTS"/000_Sublime/*.sublime-project | head -1 || :
}

project_name_from_project_file() {
  echo "$1" | sed -E -e 's/\.sublime-project$//' -e 's=(.+/)*==g' #| tee >( (echo -n "Project name from project file: "; cat) >&2 )
}

derive_project_name_from_dir() {
  local dir_path dir_name_without_branch_suffix
  dir_path="$1"
  dir_name_without_branch_suffix="$(echo "$dir_path" | tr / '\n' | tail -1 | tr : '\n' | head -1)"
  if is_greensync_project; then
    echo "GreenSync $dir_name_without_branch_suffix"
  else
    echo "$dir_name_without_branch_suffix"
  fi | tee >( (echo -n "Derived project name from PWD: "; cat) >&2 )
}

create_project_file() {
  local all_dirs all_dirs_absolute new_project_file_path dir_absolute
  all_dirs=("$@")
  all_dirs_absolute=()
  for dir in "${all_dirs[@]}"; do
    dir_absolute="$(absolute_dir_path "$dir")" || exit 1
    all_dirs_absolute+=("$dir_absolute")
  done
  new_project_file_path="$PROJECTS/000_Sublime/$(derive_project_name_from_dir "${all_dirs_absolute[0]}" 2>/dev/null).sublime-project"
  echo "Creating project file: '$new_project_file_path'..." >&2
  ruby -r json -e 'puts({ folders: ARGV.map { |path| { path: path } } }.to_json)' "${all_dirs_absolute[@]}" > "$new_project_file_path"
  echo "$new_project_file_path"
}

is_greensync_project() {
  git remote get-url origin | grep greensync/ &> /dev/null
}

focus_window_of_project_name() {
  local project_name window_title
  project_name="$1"
  window_title="($project_name) - Sublime Text"
  echo "Attempting to focus window: '$window_title'" >&2
  # wmctrl -a "$window_title" # Doesn't work on Wayland
  gdbus call -e -d org.gnome.Shell -o /org/gnome/Shell -m org.gnome.Shell.Eval "var mw = global.get_window_actors().map(w=>w.meta_window).find(mw=>mw.get_title().includes('$window_title')).activate(0)" | grep -E '^\(true,' > /dev/null
}

focus_window_of_project_file() {
  local project_file project_name
  project_file="$1"
  project_name="$(project_name_from_project_file "$project_file")"
  focus_window_of_project_name "$project_name"
}

open_project_file_and_focus_window() {
  local project_file
  project_file="$1"
  subl --project "$project_file"
  echo -n "Waiting for Sublime to open project"
  while :; do
    focus_window_of_project_file "$project_file" &> /dev/null && break
    printf .
    sleep 0.01
  done
}

first_dir="${1-$PWD}"
all_dirs=("${@-$first_dir}")

existing_project_file="$(find_existing_project_file "$first_dir")"
if [ -n "$existing_project_file" ]; then
  echo "Project exists: $existing_project_file"
  focus_window_of_project_file "$existing_project_file" || (
    echo "Project not already open"
    open_project_file_and_focus_window "$existing_project_file"
  )
else
  echo "Project doesn't exist yet"
  new_project_file="$(create_project_file "${all_dirs[@]}")"
  open_project_file_and_focus_window "$new_project_file"
fi
